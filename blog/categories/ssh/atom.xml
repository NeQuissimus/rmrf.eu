<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SSH | rm -rf /]]></title>
  <link href="http://nequissimus.github.com/rmrf.eu/blog/categories/ssh/atom.xml" rel="self"/>
  <link href="http://nequissimus.github.com/rmrf.eu/"/>
  <updated>2012-06-16T16:01:16-04:00</updated>
  <id>http://nequissimus.github.com/rmrf.eu/</id>
  <author>
    <name><![CDATA[Tim Steinbach]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SSH tunnel - Windows]]></title>
    <link href="http://nequissimus.github.com/rmrf.eu/blog/2010/10/04/SSH-tunnel-Windows/"/>
    <updated>2010-10-04T11:00:00-04:00</updated>
    <id>http://nequissimus.github.com/rmrf.eu/blog/2010/10/04/SSH-tunnel-Windows</id>
    <content type="html"><![CDATA[<p>After explaining the SSH tunnel for Mac, here is the Windows version.</p>

<p>(from the Mac entry)</p>

<blockquote><p>Have you ever been stuck behind a corporate firewall? (Or at school?)
It is usually fairly easy to bypass those systems using an SSH tunnel. All you need to have is a server on the Internet that allows you to log in via SSH.</p></blockquote>

<!--more-->


<p>Get a copy of PuTTY for Windows and open it.
First, enter your server data such as IP address and port.
Go to Connection – SSH – Tunnels and enter a port as “Source Port” (eg. 8888) and an asterisk (*) as destination.
Then switch to Dynamic and hit “Add”.
Then go back to your basic options and save your profile under any name.</p>

<p>As soon as you open the connection and keep it open with PuTTY you can change your browser’s proxy settings to localhost:8888 and surf the Internet through that SSH tunnel.
Since all the browsers work differently under Windows, please use Google to find out how to change the proxy settings for your particular browser.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH tunnel - Mac]]></title>
    <link href="http://nequissimus.github.com/rmrf.eu/blog/2010/10/03/SSH-tunnel-Mac/"/>
    <updated>2010-10-03T11:00:00-04:00</updated>
    <id>http://nequissimus.github.com/rmrf.eu/blog/2010/10/03/SSH-tunnel-Mac</id>
    <content type="html"><![CDATA[<p>Have you ever been stuck behind a corporate firewall? (Or at school?)
It is usually fairly easy to bypass those systems using an SSH tunnel. All you need to have is a server on the Internet that allows you to log in via SSH.</p>

<!--more-->


<p>Really, all you need to do is open Terminal.app and type in one command:</p>

<p><code>ssh -l USER -D 19999 [-p PORT] server.address.com</code></p>

<p>Replace <em>USER</em> and <em>server.address.com</em> with your data. The <em>-p PORT</em> part is optional, if your server runs SSH on port 22, you can leave it out.</p>

<p>Now you will need to enter your password. Just leave Terminal.app open and minimize it.
Go to your System Preferences and then to Network, choose your currently connected network connection (e.g. Ethernet), unlock your preferences if you need to and then go to Advanced – Proxies.
Here tick the SOCKS Proxy checkbox and enter localhost as host, 19999 as port.
Hit OK, then Apply.
Now Safari will go through your SSH tunnel when surfing the web and all those filters applied by a corporate or school proxy will no longer be in effect.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Log in to SSH automatically with a public key]]></title>
    <link href="http://nequissimus.github.com/rmrf.eu/blog/2010/09/17/Log-in-to-SSH-automatically-with-a-public-key/"/>
    <updated>2010-09-17T11:00:00-04:00</updated>
    <id>http://nequissimus.github.com/rmrf.eu/blog/2010/09/17/Log-in-to-SSH-automatically-with-a-public-key</id>
    <content type="html"><![CDATA[<p>I find myself logging in an out of servers a dozen times a day. Entering the secure password, which is a rather long one, can become quite annoying after some time.
In order to authenticate with SSH it is also possible to use a pair of keys, a private and a public key.</p>

<!--more-->


<p>First, you will need a small tool called “PuTTY Key Generator” or simply “PuTTYgen” (e.g. found here).
Hit the “Generate” button and move your mouse around until the progress bar is gone and you can see a seemingly random occurrence of symbols. This is your public key.
Now hit the button labelled “Save private key” and save it to your hard drive.
Log in to your server via SSH now and create a folder called <code>.ssh</code> (mind the dot) in your home folder, then create a file called <code>authorized_keys</code> and finally add the symbol soup that is your “Key” from the Key Generator into that file. Make sure you remove all line breaks. (I had two of them)</p>

<p>Here are the Linux commands:</p>

<pre><code>cd
mkdir .ssh
touch .ssh/authorized_keys
nano .ssh/authorized_keys
</code></pre>

<p>When you want to exit nano, hit Ctrl+X, then Enter, then Y to save the file.
After that, close your connection to the server.</p>

<p>Assuming, you already have a connection session to your server with PuTTY, all you have to do is open that session and go to the Connection->SSH->Auth settings in order to add the private key you saved a moment ago. It is the setting at the very bottom.
Also, go to Connection->Data and add your username to the input field at the top of that settings screen.
Now save the session.
When you double-click the session now, you will no longer have to enter your username or password and automatically be signed in.</p>

<p>If you find double-clicking the session too annoying, too, try this:
Create a shortcut to putty and add <code>-load XYZ</code> (replace XYZ with your session name in PuTTY) in the “target” field. The shortcut will then automatically load this session and since the session automatically logs you in, double-clicking the shortcut will be all you have to do from now on.</p>
]]></content>
  </entry>
  
</feed>
